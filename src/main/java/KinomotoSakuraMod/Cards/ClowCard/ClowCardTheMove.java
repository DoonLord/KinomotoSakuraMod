package KinomotoSakuraMod.Cards.ClowCard;import KinomotoSakuraMod.Actions.MoveAction;import KinomotoSakuraMod.Cards.AbstractMagicCard;import KinomotoSakuraMod.Patches.CustomCardColor;import KinomotoSakuraMod.Patches.CustomTag;import com.megacrit.cardcrawl.actions.common.GainBlockAction;import com.megacrit.cardcrawl.characters.AbstractPlayer;import com.megacrit.cardcrawl.core.CardCrawlGame;import com.megacrit.cardcrawl.dungeons.AbstractDungeon;import com.megacrit.cardcrawl.localization.CardStrings;import com.megacrit.cardcrawl.monsters.AbstractMonster;public class ClowCardTheMove extends AbstractMagicCard{    public static final String ID = "ClowCardTheMove";    private static final String NAME;    private static final String DESCRIPTION;    private static final String IMAGE_PATH = "img/cards/default_skill_card.png";    private static final int COST = 0;    private static final CardType CARD_TYPE = CardType.SKILL;    private static final CardColor CARD_COLOR = CustomCardColor.CLOWCARD_COLOR;    private static final CardRarity CARD_RARITY = CardRarity.COMMON;    private static final CardTarget CARD_TARGET = CardTarget.SELF;    private static final int BASE_BLOCK = 3;    private static final int UPGRADE_BLOCK = 4;    private static final int BASE_MAGIC_NUMBER = 1;    static    {        CardStrings cardStrings = CardCrawlGame.languagePack.getCardStrings(ID);        NAME = cardStrings.NAME;        DESCRIPTION = cardStrings.DESCRIPTION;    }    public ClowCardTheMove()    {        super(ID, NAME, IMAGE_PATH, COST, DESCRIPTION, CARD_TYPE, CARD_COLOR, CARD_RARITY, CARD_TARGET);        this.tags.add(CustomTag.PHYSICS_CARD);        this.baseBlock = BASE_BLOCK;        this.setBaseMagicNumber(BASE_MAGIC_NUMBER);    }    @Override    public void upgrade()    {        if (!this.upgraded)        {            upgradeName();            upgradeBlock(UPGRADE_BLOCK);        }    }    @Override    public AbstractMagicCard makeCopy()    {        return new ClowCardTheMove();    }    @Override    public void use(AbstractPlayer player, AbstractMonster monster)    {        AbstractDungeon.actionManager.addToBottom(new MoveAction(this.correctMagicNumber()));        AbstractDungeon.actionManager.addToBottom(new GainBlockAction(player, player, this.correctBlock()));    }}